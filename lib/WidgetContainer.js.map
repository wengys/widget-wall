{"version":3,"sources":["../src/WidgetContainer.ts"],"names":["WidgetContainer","widgetContainer","widgetDefinitions","LayoutMode","grid","widgetsFactory","WidgetsFactory","flowThreshold","window","matchMedia","data","addClass","containerConfig","rows","cols","widgetConfigs","widgets","destroy","maxWidth","css","minWidth","map","wcfg","create","widgetNodes","render","on","refreshView","forEach","w","idx","ev","element","onDestroy","empty","appendWidgetNodes","renderWidgets","widget","$widgetWrapper","widgetConfig","$widget","find","renderOptions","config","layoutMode","displayMode","wrapper","get","init","type","header","prepend","append","push","totalWidth","width","unitSize","height","gridUnitSize","matches","containerHeight","removeClass","removeAttr","flow","widgetIndex","position","row","col","colspan","rowspan","updateWidgetStyle","notifyChange","getUnitSize","updateDisplayMode","updateWidgetStyles","notifyWidgetsSizeChange","onSizeChange","SimpleEventEmitter"],"mappings":"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","sourcesContent":["﻿import $ from \"jquery\"\r\nimport { WidgetsFactory } from \"./WidgetsFactory\"\r\nimport { WidgetContainerConfig, WidgetConfig } from \"./WidgetConfig\";\r\nimport { WidgetInstance, WidgetDefinition } from \"./WidgetInstance\";\r\nimport { LayoutMode, isGrid } from \"./LayoutMode\";\r\nimport { WidgetRuntimeEvents } from \"./WidgetRuntimeEvents\"\r\nimport { SimpleEventEmitter } from \"se-emitter\";\r\n\r\n/**\r\n * 单位尺寸\r\n */\r\ninterface UnitSize {\r\n    height: number\r\n    width: number\r\n}\r\n\r\n/**\r\n * 小组件容器\r\n */\r\nexport class WidgetContainer extends SimpleEventEmitter {\r\n    private cols: number = 24;\r\n    private flowThreshold: MediaQueryList;\r\n    private rows: number = 0\r\n    private widgets: WidgetInstance[] = [];\r\n    private widgetNodes: HTMLDivElement[] = [];\r\n    private widgetConfigs: WidgetConfig[] = [];\r\n    private displayMode: LayoutMode = LayoutMode.grid;\r\n    private widgetsFactory: WidgetsFactory;\r\n\r\n    constructor(\r\n        private widgetContainer: string | HTMLDivElement,\r\n        widgetDefinitions: WidgetDefinition[]\r\n    ) {\r\n        super()\r\n        this.widgetsFactory = new WidgetsFactory(widgetDefinitions);\r\n        this.flowThreshold = window.matchMedia($(this.widgetContainer).data(\"flow-threshold\"));\r\n        $(this.widgetContainer).addClass(\"widget-container\")\r\n    }\r\n\r\n    /**\r\n     * 初始化\r\n     * @param widgets 小组件\r\n     */\r\n    public init(containerConfig: WidgetContainerConfig) {\r\n        this.rows = containerConfig.rows;\r\n        this.cols = containerConfig.cols\r\n        this.widgetConfigs = containerConfig.widgets;\r\n\r\n        this.destroy()\r\n\r\n        if (containerConfig.maxWidth) {\r\n            $(this.widgetContainer).css(\"maxWidth\", containerConfig.maxWidth)\r\n        } else {\r\n            $(this.widgetContainer).css(\"maxWidth\", \"\")\r\n        }\r\n        if (containerConfig.minWidth) {\r\n            $(this.widgetContainer).css(\"minWidth\", containerConfig.minWidth)\r\n        } else {\r\n            $(this.widgetContainer).css(\"minWidth\", \"\")\r\n        }\r\n\r\n        this.widgets = containerConfig.widgets.map((wcfg) => this.widgetsFactory.create(wcfg/*, this*/));\r\n\r\n        this.widgetNodes = [];\r\n        this.render();\r\n\r\n        $(window).on(\"resize\", () => {\r\n            this.refreshView(true);\r\n        })\r\n    }\r\n\r\n    /**\r\n     * 销毁小组件\r\n     */\r\n    public destroy() {\r\n        this.widgets.forEach((w, idx) => {\r\n            let ev = { element: this.widgetNodes[idx] }\r\n            w.onDestroy(ev)\r\n        })\r\n        $(this.widgetContainer).empty()\r\n    }\r\n\r\n    /**\r\n     * 渲染小组件\r\n     * @param widgets\r\n     */\r\n    private render() {\r\n        this.appendWidgetNodes(this.widgets);\r\n        this.refreshView(false);\r\n        this.renderWidgets(this.widgets)\r\n    }\r\n\r\n    private renderWidgets(widgets: WidgetInstance[]) {\r\n        widgets.forEach((widget, idx) => {\r\n            let $widgetWrapper = $(this.widgetNodes[idx]);\r\n            let widgetConfig = this.widgetConfigs[idx]\r\n            let $widget = $widgetWrapper.find(\".widget\");\r\n            let renderOptions = {\r\n                config: widgetConfig,\r\n                layoutMode: this.displayMode,\r\n                wrapper: <HTMLDivElement>$widgetWrapper.get(0),\r\n                element: <HTMLDivElement>$widget.get(0)\r\n            }\r\n            widget.init(renderOptions.element, renderOptions)\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 插入小组件节点\r\n     * @param widgets 小组件\r\n     */\r\n    private appendWidgetNodes(widgets: WidgetInstance[]) {\r\n        widgets.forEach((widget) => {\r\n            let $widgetWrapper = $(`<div class=\"widget-wrapper\"><div class=\"widget widget-${widget.type}\"></div></div>`);\r\n            let $widget = $($widgetWrapper.find(\".widget\").get(0));\r\n\r\n            let header = widget.header\r\n            if (header) {\r\n                $widgetWrapper.prepend(`<div class=\"widget-head\">${header}</div>`).addClass(\"widget-title-padding\");\r\n            }\r\n            $(this.widgetContainer).append($widgetWrapper);\r\n            this.widgetNodes.push($widgetWrapper[0] as HTMLDivElement)\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 获取网格单位宽高\r\n     */\r\n    private getUnitSize(): UnitSize {\r\n        let totalWidth = <number>$(this.widgetContainer).width();\r\n        let cols = this.cols\r\n        let unitSize: UnitSize = {\r\n            height: totalWidth / cols,\r\n            width: totalWidth / cols\r\n        }\r\n        return unitSize;\r\n    }\r\n    /**\r\n     * 更新显示模式\r\n     */\r\n    private updateDisplayMode(gridUnitSize: UnitSize): LayoutMode {\r\n        if (!this.flowThreshold.matches) {\r\n            let containerHeight = this.rows * gridUnitSize.height + \"px\";\r\n            $(this.widgetContainer)\r\n                .css(\"position\", \"relative\")\r\n                .css(\"height\", containerHeight).removeClass(\"widget-container-flow\").addClass(\"widget-container-grid\")\r\n            $(this.widgetContainer).find(\">div\").css(\"position\", \"absolute\");\r\n\r\n            return LayoutMode.grid\r\n        }\r\n        else {\r\n            $(this.widgetContainer).removeAttr(\"style\").addClass(\"widget-container-flow\").removeClass(\"widget-container-grid\")\r\n            $(this.widgetContainer).find(\">div\").removeAttr(\"style\");\r\n\r\n            return LayoutMode.flow\r\n        }\r\n    }\r\n    /**\r\n     * 更新小组件样式\r\n     */\r\n    private updateWidgetStyle(widget: WidgetInstance, widgetIndex: number, unitSize: UnitSize) {\r\n        if (isGrid(this.displayMode)) {\r\n            let widgetConfig = this.widgetConfigs[widgetIndex]\r\n            $(this.widgetNodes[widgetIndex]).css(\"top\", widgetConfig.position.row * unitSize.height + \"px\")\r\n                .css(\"left\", widgetConfig.position.col * unitSize.width + \"px\")\r\n                .css(\"width\", widgetConfig.position.colspan * unitSize.width + \"px\")\r\n                .css(\"height\", widgetConfig.position.rowspan * unitSize.height + \"px\");\r\n        }\r\n    }\r\n    /**\r\n     * 更新小组件样式\r\n     */\r\n    private updateWidgetStyles(gridUnitSize: UnitSize): void {\r\n        this.widgets.forEach((widget, idx) => {\r\n            this.updateWidgetStyle(widget, idx, gridUnitSize)\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 刷新视图\r\n     */\r\n    private refreshView(notifyChange: boolean): void {\r\n        let gridUnitSize = this.getUnitSize();\r\n        this.displayMode = this.updateDisplayMode(gridUnitSize);\r\n        this.updateWidgetStyles(gridUnitSize);\r\n        if (notifyChange) {\r\n            this.notifyWidgetsSizeChange(this.displayMode);\r\n        }\r\n    }\r\n\r\n    private notifyWidgetsSizeChange(layoutMode: LayoutMode): void {\r\n        this.widgets.forEach((w, idx) => {\r\n            let wrapper = this.widgetNodes[idx]\r\n            w.onSizeChange({\r\n                layoutMode: layoutMode,\r\n                wrapper: wrapper,\r\n                element: <HTMLDivElement>$(wrapper).find(\".widget\").get(0)\r\n            })\r\n        });\r\n    }\r\n}"],"file":"WidgetContainer.js"}